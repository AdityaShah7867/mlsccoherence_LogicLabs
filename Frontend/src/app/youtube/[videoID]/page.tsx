'use client'
import React, { useEffect, useState } from "react";
import DefaultLayout from "@/components/Layouts/DefaultLayout";
import axios from 'axios';

const Page = ({ params }: { videoId: string }) => {
  const [embedUrl, setEmbedUrl] = useState("");
  const [analyzedComments, setAnalyzedComments] = useState<any[]>([]);
  const [averageSentiment, setAverageSentiment] = useState<number | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(`http://localhost:4000/api/youtube/analyzeComments/I5kpdh-RAVQ`);
        if (response.status === 200) {
          setEmbedUrl(`https://www.youtube.com/embed/I5kpdh-RAVQ?si=mf4_-QqwGOJLWPC0`);
          setAnalyzedComments(response.data.analyzedComments);
          calculateAverageSentiment(response.data.analyzedComments);
        } else {
          console.error('Error fetching video data');
        }
      } catch (error) {
        console.error('Error fetching video data:', error);
      }
    };

    fetchData();
  }, [params.videoId]);


  const [description, setDescription] = useState('');
  const [error, setError] = useState('');

  const generateDescription = async () => {
    try {
      const response = await fetch('http://localhost:4000/api/generateVideoDescription', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      });

      if (!response.ok) {
        throw new Error('Failed to fetch description');
      }

      const data = await response.json();
      setDescription(data.description);
    } catch (error) {
      console.error('Error fetching description:', error);
      setError('Error fetching description. Please try again.');
    }
  };


  useEffect(()=>{
    generateDescription();
  },[])

  const calculateAverageSentiment = (comments: any[]) => {
    if (comments.length === 0) {
      setAverageSentiment(null);
      return;
    }

    const totalSentiment = comments.reduce((acc, comment) => acc + comment.sentiment, 0);
    const average = totalSentiment / comments.length;
    setAverageSentiment(average);
  };

  return (
    <DefaultLayout>
      <div className="flex flex-wrap justify-center items-center gap-8">
      <div>
        <iframe
          width="560"
          height="315"
          src={embedUrl}
          title="YouTube video player"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
        ></iframe>
      </div>
      <div>
        <h2>Analyzed Comments:</h2>
        <br/>
        <ul>
          {analyzedComments.map((comment, index) => (
            <li key={index}>
              <p>{comment.comment}</p>
              {/* <p>Sentiment: {comment.sentiment}</p>s */}
            </li>
          ))}
        </ul>
        <p className="font-bold text-green-500 text-xl">Average Sentiment: {averageSentiment !== null ? averageSentiment.toFixed(2) : 'N/A'}</p>
      </div>
      </div>
      <div>
        <div className="bg-white m-2 p-6 rounded-lg mt-8 ">
          <p className="font-semibold text-2xl text-black">
          Transcript generated by Ai:
          <div>

      {description && <p>{description}</p>}
      {error && <p>{error}</p>}
    </div>
          </p>
          <br/>
          <div>

          </div>

        </div>
      </div>
    </DefaultLayout>
  );
};

export default Page;
